#!/bin/bash


STATE=~/.cache/microphone.state

FACTOR=654

INTERNAL_VOLUME=20
HEADSET_VOLUME=35

MONITOR=0
INPUT=1

# Always mute monitor and set port to headset mic if available
pacmd set-source-volume $MONITOR 0
pacmd set-source-port alsa_input.pci-0000_00_1f.3.analog-stereo analog-input-headset-mic

function notify () {
    if ! [[ $NOTIFY == "false" ]]
    then
        DEVICE=$( pacmd list-sources | grep 'active port' | sed 's/<analog-input-//;s/>//;' | awk '{print$NF}')
        notify-send -t 1000 -i mic-on Microphone "$DEVICE" --hint="int:value:$1"
    fi
}

function notify_mute () {
    DEVICE=$( pacmd list-sources | grep 'active port' | sed 's/<analog-input-//;s/>//;' | awk '{print$NF}')
    notify-send -t 1000 -i mic-off Microphone "$DEVICE"
}

function set_absolute () {
    echo $1 > ${STATE}
    pacmd set-source-volume $INPUT $(( $1 * $FACTOR ))
    notify $1
}

function pause () {
    pacmd set-source-volume $MONITOR 0
    pacmd set-source-volume $INPUT 0
    notify_mute
}

function mute () {
    pacmd set-source-volume $MONITOR 0
    pacmd set-source-volume $INPUT 0
    echo 0 > $STATE
    notify_mute
}

function resume_from_state () {
    set_absolute $(cat ${STATE})
}

function min () {
    if [ -f /tmp/headphones-plugged ]
    then
        set_absolute $( echo $HEADSET_VOLUME ' * 3 / 4 ' | bc )
    else
        set_absolute $( echo $INTERNAL_VOLUME ' * 3 / 4 ' | bc )
    fi
}

function max () {
    if [ -f /tmp/headphones-plugged ]
    then
        set_absolute $HEADSET_VOLUME
    else
        set_absolute $INTERNAL_VOLUME
    fi
}

case $1 in
    pause|mute|min|max)
        $1
        ;;
    resume)
        resume_from_state
        ;;
    set_absolute)
        $1
        ;;
    *)
        exit 1
        ;;
esac
