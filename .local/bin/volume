#!/bin/bash


STATE=~/.cache/volume.state
HEADSET_STATE=~/.cache/headset.state

INTERNAL_VOLUME=65
HEADSET_VOLUME=45

# Fetch desired active port
# pacmd list-sinks | grep 'active port:' | grep -o '<.*>'  | sed 's/^.//;s/.$//' > ${HEADSET_STATE}
pacmd set-sink-port alsa_output.pci-0000_00_1f.3.analog-stereo $(cat $HEADSET_STATE)
if ! [ -f $HEADSET_STATE ]
then
    echo 'analog-output-headphones' > $HEADSET_STATE
fi

function notify () {
    notify-send -t 1000 -i audio-volume-high Volume "" --hint="int:value:$1"
}

function set_absolute () {
    amixer set Master unmute ${1}%
    save_volume
    notify $1
}

function get_volume () {
    amixer sget Master | grep -o '\[[0-9]\+%\]' | sed 's/]//;s/\[//;s/%//' | head -1
}

function save_volume () {
    get_volume > $STATE
}

function pause () {
    amixer set Master 0%
    microphone pause
    notify-send -t 1000 -i audio-volume-muted Volume ""
}

function mute () {
    pause
    save_volume
}

function resume_from_state () {
    set_absolute $(cat ${STATE})
}

function decrease () {
    amixer set Master 5%-
    save_volume
    notify $(get_volume)
}

function increase () {
    amixer set Master unmute 5%+
    microphone resume
    save_volume
    notify $(get_volume)
}

function min () {
    if grep -q 'analog-output-speaker' $HEADSET_STATE
    then
        set_absolute $( echo $INTERNAL_VOLUME ' * 3 / 4 ' | bc )
    else
        set_absolute $( echo $HEADSET_VOLUME ' * 3 / 4 ' | bc )
    fi
    microphone resume
}

function max () {
    if grep -q 'analog-output-speaker' $HEADSET_STATE
    then
        set_absolute $INTERNAL_VOLUME
    else
        set_absolute $HEADSET_VOLUME
    fi
    microphone resume
}

case $1 in
    pause|mute|decrease|increase|min|max)
        $1
        ;;
    resume)
        resume_from_state
        ;;
    set_absolute)
        $1 $2
        ;;
    *)
        exit 1
        ;;
esac
