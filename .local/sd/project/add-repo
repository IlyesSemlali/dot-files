#!/usr/bin/env bash

# adds a repo into current project
#
# This will either add a git worktree or a link in the
# current project according to the REOP_EXCLUDE_PATTERN

source "${HOME}/.local/lib/log"
source "${HOME}/.local/lib/clipboard"

gitrepos=${GIT_REPOS:-$HOME/git}
projects_path=${PROJECTS_PATH:-${HOME}/projects}

while getopts r:w flag
do
  case "${flag}" in
    r) repo=${OPTARG};;
    w) create_worktree=1;;
    *) continue;;
  esac
done


if [ -n "${repo}" ]; then
  WORKTREES="${repo//gitrepos/}"
else
  WORKTREES="$(find "$gitrepos" -maxdepth 4 -mindepth 2 -name '.git' -type d | \
    sed "s/\/\.git//g" | sed "s@$gitrepos@@g" | \
    sort | fzf -m --border-label='Repositories')"
fi


gitc() {
  if git -C "${gitrepos}/${WORKTREE}" "$@" 2>/dev/null; then
    return

  else
    log_error "project" "error performing: git -C ${gitrepos}/${WORKTREE} $*"

  fi
}

if [ -z "${PROJECT}" ]; then
  log_error "project" "PROJECT env variable isn't set"
  exit 1
else
  if [ -z "${WORKTREES}" ]; then

    log_info "project" "no repos were selected"
    exit 0 # It means we didn't select anything with fzf

  else

    for WORKTREE in ${WORKTREES}; do
      PROJECT_DIR="${projects_path}/$PROJECT/$(basename "${WORKTREE}" 2>/dev/null)"

      if [ -z "${create_worktree}" ]; then

        if [ -e "${PROJECT_DIR}" ]; then
          log_info "project" "project is already present"
        else
          log_info "project" "linking existing directory"
          ln -sf "${gitrepos}/${WORKTREE}" "$PROJECT_DIR"
          # ln -sf "${gitrepos}/${WORKTREE}" "$PROJECT_DIR"
        fi

      else

        if [ -e "${PROJECT_DIR}" ]; then
          log_info "project" "project is already present"
        else
          log_info "project" "fetching from git"
          gitc fetch
          if gitc branch -r | grep -o "${PROJECT}"; then
            log_info "project" "checking out existing remote branch"
            gitc worktree add "${PROJECT_DIR}" "${PROJECT}"
            gitc branch --set-upstream-to="origin/${PROJECT}"
          elif gitc branch | grep -o "${PROJECT}"; then
            log_info "project" "checking out existing local branch"
            gitc worktree add "${PROJECT_DIR}" "${PROJECT}"
          else
            log_info "project" "checking out in a new branch"
            gitc worktree add "${PROJECT_DIR}" -b "${PROJECT}"
          fi
        fi

      fi
    done
  fi
fi
