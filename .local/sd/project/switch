#!/usr/bin/env bash


# switches between projects
#
# Opens a FZF menu to select the project you need to switch to. It will also open a TMUX
# session for that project and source the ".project" file (useful to setup specific tools)

source "${HOME}/.local/lib/log"

projects_path="${PROJECTS_PATH:-${HOME}/projects/}"
CACHE_FILE="$HOME/.cache/project-switcher"


run-tmux () {

  project=${1}
	if tmux has-session -t "${project}" 2>/dev/null; then
		tmux attach-session -t "${project}"
	else
		tmux new-session -e PROJECT="${project}" -t "${project}" -c "${projects_path}/${project}"
	fi
}

if [ ${#} -eq 0 ]; then
  SEARCH_TERM=()
else
  SEARCH_TERM=(-q "${@}")
fi

SEARCH_RESULTS=$(find "${projects_path}" -maxdepth 1 -mindepth 1 -type l,d -exec basename {} \;  | sort)

if [ "$(echo "${SEARCH_RESULTS}" | fzf --filter "${@}" | wc -l)" -eq 1 ] && [ ${#} -ne 0 ]
then
  PROJECT=$(echo "${SEARCH_RESULTS}" | fzf --filter "${@}")
else
  PROJECT=$(echo "${SEARCH_RESULTS}"| sort | fzf --border-label='Projets' "${SEARCH_TERM[@]}")
fi

if [ -z "${PROJECT}" ]; then
  log_error "project" "not project was selected"
else
  echo "${PROJECT}" > "${CACHE_FILE}"
fi

# Run it once if not in tmux
if [ -z "${TMUX}" ]; then
  run-tmux "${PROJECT}"
else
  echo "${PROJECT}" > "${CACHE_FILE}"
fi


# Then while the $CACHE_FILE is present, rerun tmux
while [ -f "${CACHE_FILE}" ]; do
  tmux detach-client

  PROJECT=$(cat "${CACHE_FILE}")
  rm "${CACHE_FILE}" -f

  run-tmux "${PROJECT}" 2>/dev/null # remove the "nested tmux" error
done
