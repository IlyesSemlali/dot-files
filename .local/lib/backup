# vim: ft=bash
# Bash library to handle backups

source "${HOME}/.local/lib/log"


function generate_config() {
  log_debug "backup-lib" "calling ${FUNCNAME}"
  BACKUP_CONFIG_FILE=${BACKUP_CONFIG_FILE:-~/.config/backups.yaml}

  yq '
  {
    "backups" : .backups
    + { "home" : { "basedir" : "~", "path" : "."}}
    | map_values(
      (.basedir = .basedir // "~"),
      (.path = (.path // key) + "/"),
      (.excludes = (.excludes // []))
    ),
    "excludes" : .excludes
  }
  ' ${BACKUP_CONFIG_FILE}
}


function check_if_declared() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  if [ $# -ne 1 ]; then
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1
  else
    backup_name=${1}
  fi

  if yq -e '.backups | has("'${backup_name}'")' <(generate_config) &>/dev/null; then
    return 0
  else
    log_error "backup" "${backup_name} not declared in <(generate_config)"
    return 1
  fi
}


function check_borg_repo_var() {
  log_debug "backup-lib" "calling ${0}"

  if [ -z "${BORG_REPO}" ]; then
    log_error "backup" "\$BORG_REPO isn't set"
    return 1
  else
    log_debug "backup" "\$BORG_REPO is set"
  fi

  if [[ "${BORG_REPO}" =~ ^(ssh://[0-9a-z]*(@[0-9a-z]*)?(:[0-9]*)?)?(/[0-9A-Za-z]*)*$ ]]; then
    log_debug "backup" "\$BORG_REPO matches pattern"
  else
    log_error "backup" "\$BORG_REPO doesn't match pattern"
    return 1
  fi
}

function check_repo() {
if [ -n "${repo}" ]; then
  if borg check --bypass-lock --repository-only "${BORG_REPO}/${repo}"; then
    log_debug "backup" "host connection is OK"
  else
    log_error "backup" "couldn't connect to host"
    return 1
  fi
fi
}

function config_read_path() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  if [ $# -ne 1 ]; then
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1
  else
    backup_name=${1}
  fi

  check_if_declared ${backup_name}

  echo $(yq '.backups["'${backup_name}'"].path | sub("~", strenv(HOME))' <(generate_config))
}


function config_read_basedir() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  if [ $# -ne 1 ]; then
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1
  else
    backup_name=${1}
  fi

  check_if_declared ${backup_name}

  echo $(yq '.backups["'${backup_name}'"].basedir | sub("~", strenv(HOME))' <(generate_config))
}


function config_read_fullpath() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  if [ $# -ne 1 ]; then
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1
  else
    backup_name=${1}
  fi

  check_if_declared ${backup_name}

  echo $(yq '
  .backups["'${backup_name}'"]
  | .basedir + "/" + .path
  | sub("~", strenv(HOME))
  | sub("/./?$", "")
  ' <(generate_config))
}


function config_read_excludes() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  if [ $# -ne 1 ]; then
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1
  else
    backup_name=${1}
  fi

  check_if_declared ${backup_name}

  # YQ Request pattern:
  # - Merge all exclusion sources
  # - Expand paths
  # - Filter out unrelated paths
  # - Filter out basedir

  yq '
  (
    [.excludes[]
    ] +
    [.backups["'${backup_name}'"].excludes[] | sub("^", "'$(config_read_fullpath ${backup_name})'")] +
    [.backups
      | del(.'${backup_name}')
      | .[]
      | .basedir + "/" + .path
    ]
    | map(sub("~", strenv(HOME)))
    | map(sub("/$", ""))
    | map(sub("/\.$", ""))
  )
  | .[]
  | select(
      (test("^'$(config_read_basedir ${backup_name})'") and test("^/")) or
      (test("^/") | not)
    )
  | select(test("^'$(config_read_basedir ${backup_name})'$") | not )
  | sub("'$(config_read_basedir ${backup_name})'/", "")
  ' <(generate_config)
}


function get_last_archive() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  if [ $# -ne 1 ]; then
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1
  else
    backup_name=${1}
  fi

  borg list "${BORG_REPO}/${backup_name}" --last 1 --json | jq -r '.archives[].name'
}

function init_repo() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  if [ $# -ne 1 ]; then
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1
  else
    backup_name=${1}
  fi

  if (borg check "${BORG_REPO}/${backup_name}" &>/dev/null); then
    log_info "backup" "the \"${backup_name}\" repo already exists"

  elif (borg init --encryption none "${BORG_REPO}/${backup_name}" &>/dev/null); then
    log_info "backup" "successfully created the \"${backup_name}\" repo"

  else
    log_error "backup" "couldn't create ${backup_name} repo"
    return 1
  fi
}


function create_archive() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  # Number of seconds since midnight
  # to differenciate multiple archives in the same day
  eval "$(date +'today=%F now=%s')"
  midnight=$(date -d "$today 0" +%s)

  if [ $# -eq 1 ]; then

    backup_name=${1}
    archive_name="$(hostname -s)-$(date --iso-8601)-$((now - midnight))"

  elif [ $# -eq 2 ]; then
    backup_name=${1}
    archive_name=${2}

  else
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1

  fi

  path=$(config_read_path ${backup_name})
  basedir=$(config_read_basedir ${backup_name})

  if [ "${backup_name}" != "home" ]; then
    check_if_declared ${backup_name} || return 1
  fi


  if (
    cd ${basedir} 2> /dev/null || (log_error "backup" "couldn't change directory to ${basedir}" && return 1)
    borg create --stats --list --filter ACME --compression lzma "${BORG_REPO}/${backup_name}::${archive_name}" --exclude-from <(config_read_excludes ${backup_name}) ${path}
  )
  then
    log_info "backup" "successfully created archive ${BORG_REPO}/${backup_name}::${archive_name}"

  else
    log_error "backup" "couldn't create archive ${BORG_REPO}/${backup_name}::${archive_name}"
    return 1

  fi
}


function list_archives() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  if [ $# -ne 1 ]; then
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1
  fi

  repo_name=${1}

  if (borg list --json "${BORG_REPO}/${repo_name}" | yq '.archives[] | .name' )
  then
    true
  else
    log_error "backup" "couldn't fetch archives list for ${repo_name}"
    return 1
  fi
}


function print_archive_details() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  if [ $# -ne 2 ]; then
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1
  fi

  repo_name=${1}
  archive_name=${2}

  if (borg info "${BORG_REPO}/${repo_name}::${archive_name}")
  then
    true
  else
    log_error "backup" "couldn't fetch details for ${archive_name}"
    return 1
  fi
}


function mount_repo() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  if [ $# -ne 1 ]; then
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1
  fi

  repo_name=${1}
  borg_mount_path="${BORG_MOUNT_PATH:-${HOME}/Backups}/${repo_name}"

  if ! (
    mkdir -p ${borg_mount_path}
    mount | grep -q ${borg_mount_path} \
      || borg mount "${BORG_REPO}/${repo_name}" ${borg_mount_path}

  ); then
    log_error "backup" "couldn't mount ${repo_name}"
    return 1
  fi
}


function unmount_repo() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  if [ $# -ne 1 ]; then
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1
  fi

  backup_name=${1}
  borg_mount_path="${BORG_MOUNT_PATH:-${HOME}/Backups}/${backup_name}"

  if ! (
    borg umount "${borg_mount_path}"
  ); then
    log_error "backup" "couldn't unmount ${backup_name}"
    return 1
  fi
}


function find_archived_path() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  if [ $# -ne 1 ]; then
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1
  fi

  backup_name=${1}
  borg_mount_path="${BORG_MOUNT_PATH:-${HOME}/Backups}/${backup_name}"

  if (mount_repo ${backup_name}); then

    backup_path=$(find "${BORG_MOUNT_PATH}/${backup_name}" \
      | sed "s@${borg_mount_path}/[a-zA-Z0-9_-]*/@@" \
      | sort -ru \
      | grep -v "^${borg_mount_path}" \
      | fzf -border-label='Archived Files'
    )

    (
      echo "path: ${backup_path}"
      echo "archives:"
      find ${borg_mount_path} -wholename "*${backup_path}" \
        | sed 's/^/ - /' \
        | sed 's@'"/${backup_path}"'$@@' \
        | sed 's@'"${borg_mount_path}"'/@@'
    ) | yq

  fi

  unmount_repo ${backup_name}
}


function restore_archive() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  if [ $# -ne 2 ]; then
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1

  else
    backup_name=${1}
    archive_name=${2}
  fi

  backup_path=$(config_read_path ${backup_name})
  basedir=$(config_read_basedir ${backup_name})

  if [ "${backup_name}" != "home" ]; then
    check_if_declared ${backup_name} || return 1
  fi


  if (
    cd ${basedir} 2> /dev/null \
      || (log_error "backup" "couldn't change directory to ${basedir}" && return 1)

    create_archive ${backup_name} "pre-restore-${archive_name}-$(date --iso-8601=seconds)" --exclude-from <(config_read_excludes ${backup_name})

    borg extract --verbose "${BORG_REPO}/${backup_name}::${archive_name}"
  )
  then
    log_info "backup" "successfully restored from ${BORG_REPO}/${backup_name}::${archive_name}"

  else
    log_error "backup" "couldn't restore from ${BORG_REPO}/${backup_name}::${archive_name}"
    return 1

  fi
}


function restore_path() {
  log_debug "backup-lib" "calling ${FUNCNAME} with $@"
  if [ $# -ne 3 ]; then
    log_debug "backup-lib" "${FUNCNAME}: wrong number of arguments: $#"
    return 1

  else
    backup_name=${1}
    archive_name=${2}
    backup_path=${3}
  fi

  basedir=$(config_read_basedir ${backup_name})

  if [ "${backup_name}" != "home" ]; then
    check_if_declared ${backup_name} || return 1
  fi


  if (
    cd ${basedir} 2> /dev/null \
      || (log_error "backup" "couldn't change directory to ${basedir}" && return 1)

    mv "${backup_path}"{,.pre-restore-${archive_name}} 2>/dev/null \
      || log_debug "backup" "${backup_path} wasn't present before"

    borg extract --list "${BORG_REPO}/${backup_name}::${archive_name}" "${backup_path}"
  )
  then
    log_info "backup" "successfully restored file ${file_name} from ${BORG_REPO}/${backup_name}::${archive_name}"

  else
    log_info "backup" "couldn't restore file ${file_name} from ${BORG_REPO}/${backup_name}::${archive_name}"
    return 1

  fi
}
